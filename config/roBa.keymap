#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E               &kp R                          &kp T                                                &kp Y      &kp U  &kp I      &kp O    &kp P
&kp A             &kp S         &lt 3 D             &kp F                          &kp G        &kp LS(LG(C_MUTE))           &kp MINUS  &kp H      &kp J  &kp K      &kp L    &kp ENTER
&mt LEFT_SHIFT Z  &kp X         &lt 4 C             &kp V                          &kp B        &kp C_VOICE_COMMAND          &kp SLASH  &kp N      &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp CAPS          &kp LEFT_ALT  &lt 6 LEFT_CONTROL  &lt_to_layer_0 5 LEFT_COMMAND  &lt 1 SPACE  &lt_to_layer_0 2 ESCAPE      &lt 2 TAB  &lt 1 DEL                             &kp SPACE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        Utilities {
            bindings = <
&kp NUMBER_0    &kt NUMBER_1   &kp NUMBER_2      &kp NUMBER_3       &kp NUMBER_4                        &kp NUMBER_5          &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9
&kp LS(LG(N))   &kp LS(LG(B))  &kp LG(Y)         &kp LS(LG(J))      &kp LG(R)     &trans      &kp HOME  &kp LS(LG(NUMBER_4))  &mkp MB1      &kp UP_ARROW  &mkp MB2      &kp ENTER
&none           &kp LG(W)      &kp LA(LG(LEFT))  &kp LA(LG(RIGHT))  &kp LG(T)     &trans      &kp END   &kp LS(LG(NUMBER_2))  &kp LEFT      &kp DOWN      &kp RIGHT     &kp RS(MINUS)
&kp LS(ESCAPE)  &kp LEFT_ALT   &kp LEFT_CONTROL  &trans             &trans        &trans      &trans    &trans                                                          &kp TAB
            >;
        };

        NUM {
            bindings = <
&kp PLUS      &kp COMMA   &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9                                          &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PLUS      &kp ASTERISK
&kp MINUS     &kp PERIOD  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp LC(LA(KP_NUMBER_0))      &kp EQUAL  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS     &kp SLASH
&kt ASTERISK  &kp EQUAL   &kp NUMBER_1  &kp NUMBER_2  &kp N3        &none                        &kp COMMA  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_0  &kp PERCENT
&kp SLASH     &kp ENTER   &kp NUMBER_0  &trans        &trans        &trans                       &trans     &trans                                                  &kp AMPERSAND
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &kp RG(F1)  &kp RC(F4)  &kp RA(RG(LEFT))  &kp RA(RG(RIGHT))  &kp RG(R)
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp RG(A)   &kp RG(C)   &kp RG(V)         &kp RG(X)          &kp RG(Z)
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp RG(W)   &kp RG(F)   &trans            &trans             &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                       &trans
            >;
        };

        ARROW {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &kp EXCLAMATION  &kp QUESTION   &kp LEFT_BRACKET      &kt RIGHT_BRACKET      &kp SLASH
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kt AT_SIGN      &kt HASH       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kt UNDERSCORE
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp DOLLAR       &kp AMPERSAND  &kp LESS_THAN         &kp GREATER_THAN       &kp MINUS
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                                       &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans        &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &kp UP_ARROW  &mkp MB2   &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp LEFT  &kp DOWN      &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                     &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans        &mkp MB1      &kp UP        &mkp MB2      &trans
&trans  &trans  &trans  &trans  &trans  &trans      &bootloader  &trans        &kp LEFT      &kp DOWN      &kp RIGHT     &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
